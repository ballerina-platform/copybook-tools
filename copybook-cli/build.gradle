plugins{
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

configurations {
    balTools
}

dependencies {
    implementation group:'org.ballerinalang', name:'ballerina-cli', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-runtime', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-lang', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-parser', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'formatter-core', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-tools-api', version:"${ballerinaLangVersion}"
    implementation group:'info.picocli', name:'picocli', version:"${picocliVersion}"
    implementation group:'io.ballerina', name:'copybook-java-parser', version:"${copybookJavaParserVersion}"
    implementation group:'org.slf4j', name: 'slf4j-jdk14', version: "${slf4jVersion}"
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: "${antlrVersion}"

    testImplementation group:'org.testng', name:'testng', version:"${testngVersion}"

    balTools group:'org.ballerinalang', name:'jballerina-tools', version: "${ballerinaLangVersion}"
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")

tasks.register('jBallerinaPack') {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

tasks.register('unpackStdLibs') {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}

tasks.register('copyStdlibs', Copy) {
    dependsOn(unpackStdLibs)
    def ballerinaDist = "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle).configureEach {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.register('copyJar', Copy) {
    dependsOn(jar)
    from "$project.buildDir/libs/copybook-cli-${version}.jar"
    into "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bre/lib"
    into "../extracted-distribution/jballerina-tools-${ballerinaLangVersion}/lib/repo/bala"
}

checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.balTools
}

test {
    dependsOn {
        copyStdlibs
    }
    systemProperty "ballerina.home", bDistribution

    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
}

spotbugsMain {
    effort "max"
    reportLevel "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
        text.enabled = true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    enabled = false
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

copyJar.dependsOn copyStdlibs
test.dependsOn copyJar

build.dependsOn(test)
