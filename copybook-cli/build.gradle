/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins{
    id 'java-library'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'jacoco'
}

dependencies {
    implementation group:'org.ballerinalang', name:'ballerina-cli', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-runtime', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-lang', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-parser', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'formatter-core', version:"${ballerinaLangVersion}"
    implementation group:'org.ballerinalang', name:'ballerina-tools-api', version:"${ballerinaLangVersion}"
    implementation group:'info.picocli', name:'picocli', version:"${picocliVersion}"
    implementation group:'io.ballerina.lib', name:'copybook-commons', version:"${copybookParserVersion}"
    implementation group:'org.slf4j', name: 'slf4j-jdk14', version: "${slf4jVersion}"
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: "${antlrVersion}"
    testImplementation group:'org.testng', name:'testng', version:"${testngVersion}"
}

tasks.register('copyAllDependencies', Copy) {
    //referring to the 'compileClasspath' configuration
    from configurations.compileClasspath
    into "$rootDir/copybook-tool/build/libs"
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle).configureEach {
    exclude excludePattern
}

checkstyle {
    toolVersion "${project.checkstylePluginVersion}"
    configFile rootProject.file("build-config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/build-config/checkstyle/build/suppressions.xml")]
}

tasks.register('copyJar', Copy) {
    dependsOn(jar)
    from "$project.buildDir/libs/copybook-cli-${version}.jar"
    into "$rootDir/copybook-tool/build/libs"
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    def classFiles = new File("${rootDir}/copybook-cli/build/classes/java/main/io/ballerina/tools/copybook")
    additionalClassDirs(classFiles)
    reports {
        xml.required = true
    }
}

checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

test {
    useTestNG() {
        suites "src/test/resources/testng.xml"
    }

    testLogging.showStandardStreams = true
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

spotbugsMain {
    def classLoader = plugins["com.github.spotbugs"].class.classLoader
    def SpotBugsConfidence = classLoader.findLoadedClass("com.github.spotbugs.snom.Confidence")
    def SpotBugsEffort = classLoader.findLoadedClass("com.github.spotbugs.snom.Effort")
    effort = SpotBugsEffort.MAX
    reportLevel = SpotBugsConfidence.LOW
    reportsDir = file("$project.buildDir/reports/spotbugs")
    reports {
        html.enabled true
    }
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if(excludeFile.exists()) {
        excludeFilter = excludeFile
    }
}

spotbugsTest {
    enabled = false
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

copyAllDependencies.dependsOn copyJar
build.dependsOn(copyAllDependencies)
