/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Copybook tool package'

def packageOrg = "ballerina"
def packageName = "copybook"
def platform = "java21"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/package/Ballerina.toml")
def balToolTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/package/BalTool.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def balToolTomlFile = new File("$project.projectDir/BalTool.toml")
def needPublishToCentral = false
def needPublishToLocalCentral = false
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def distributionBinPath = project.projectDir.absolutePath + "/build/jballerina-tools-${project.ballerinaLangVersion}/bin"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

tasks.register("initializeVariables") {
    if (project.hasProperty('publishToLocalCentral') && (project.findProperty('publishToLocalCentral') == 'true')) {
        needPublishToLocalCentral = true
    }
    if (project.hasProperty('publishToCentral') && (project.findProperty('publishToCentral') == 'true')) {
        needPublishToCentral = true
    }
}

tasks.register('updateTomlFiles') {
    doLast {
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newConfig

        def newToolConfig = balToolTomlFilePlaceHolder.text.replace("@project.version@", version)
        newToolConfig = newToolConfig.replace("@toml.antlrVersion@", antlrVersion)
        newToolConfig = newToolConfig.replace("@toml.copybookParserVersion@", copybookParserVersion)
        balToolTomlFile.text = newToolConfig
    }
}

tasks.register('commitTomlFiles') {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

tasks.register("publishToCentral") {
    doLast {
        if (needPublishToCentral) {
            if (project.version.endsWith('-SNAPSHOT') ||
                    project.version.matches(project.ext.timestampedVersionRegex)) {
                println("[Info] skipping publishing to central: project version is SNAPSHOT or Timestamped SNAPSHOT")
                return
            }
            if (ballerinaCentralAccessToken != null) {
                project.exec {
                    workingDir project.projectDir
                    environment 'JAVA_OPTS', '-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true'
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push ${balBuildTarget}/bala/${packageOrg}-${packageName}-${platform}-${tomlVersion}.bala && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$distributionBinPath/bal push ${balBuildTarget}/bala/${packageOrg}-${packageName}-${platform}-${tomlVersion}.bala"
                    }
                }
            } else {
                throw new InvalidUserDataException('Central Access Token is not present')
            }
        } else if (needPublishToLocalCentral) {
            println("[Info] Publishing to the ballerina local central repository")
            project.exec {
                workingDir project.projectDir
                environment 'JAVA_OPTS', '-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true'
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push ${balBuildTarget}/bala/${packageOrg}-${packageName}-${platform}-${tomlVersion}.bala --repository=local && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push ${balBuildTarget}/bala/${packageOrg}-${packageName}-${platform}-${tomlVersion}.bala --repository=local"
                }
            }
        }
    }
}

commitTomlFiles.dependsOn updateTomlFiles
build.dependsOn commitTomlFiles
build.dependsOn "initializeVariables"
publishToMavenLocal.dependsOn build
publish.dependsOn build
